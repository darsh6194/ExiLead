# Multi-stage Dockerfile for ExiLead Job Platform
# Stage 1: Build the application
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY components.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci && npm cache clean --force

# Copy source code
COPY client/ ./client/
COPY server/ ./server/
COPY shared/ ./shared/

# Create migrations directory for drizzle
RUN mkdir -p ./migrations

# Build the application
RUN npm install -g cross-env
RUN npm run build

# Stage 2: Python environment for scraper
FROM python:3.11-slim AS python-env

# Install system dependencies for Python packages
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory for Python
WORKDIR /app/scraper

# Copy Python requirements
COPY Scraper/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install Playwright browsers
RUN playwright install chromium
RUN playwright install-deps

# Copy Python scraper files
COPY Scraper/ .

# Stage 3: Production runtime
FROM node:18-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    postgresql-client \
    curl \
    bash

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001

# Set working directory
WORKDIR /app

# Copy package files for production install
COPY --chown=nodeuser:nodejs package*.json ./

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nodeuser:nodejs /app/dist ./dist

# Copy Python environment and scraper
COPY --from=python-env /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-env /usr/local/bin /usr/local/bin
COPY --from=python-env --chown=nodeuser:nodejs /app/scraper ./scraper

# Copy additional files
COPY --chown=nodeuser:nodejs shared/ ./shared/
COPY --chown=nodeuser:nodejs server/ ./server/
COPY --chown=nodeuser:nodejs drizzle.config.ts ./drizzle.config.ts


# Create migrations directory (migrations will be generated by drizzle)
RUN mkdir -p ./migrations



# Create necessary directories
RUN mkdir -p /app/data && chown nodeuser:nodejs /app/data

# Switch to non-root user
USER nodeuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Start command

CMD ["npm", "run", "start"]